<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- Spring的配置文件，主要配置和业务逻辑有关的 -->
	<!-- 扫描包 -->
	<context:component-scan base-package="com.teaShop">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 数据源、事务控制 -->
	<context:property-placeholder location="classpath:dbconfig.properties"/>
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- 配置和mybatis的整合 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis原配置文件位置 -->
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mybatis的mapper文件位置 -->
		<property name="mapperLocations" value="classpath:com/teaShop/mapper/*.xml"></property>
		<!-- <property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageInterceptor">
		        <property name="properties">
		          使用下面的方式配置参数，一行配置一个 
		          offsetAsPageNum=true
		            rowBoundsWithCount=true
		            pageSizeZero=true
		          returnPageInfo=true
		         
		          <value>
		            reasonable=true
		          </value>
		        </property>
		      </bean>
		    </array>
		  </property> -->
	
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到IOC容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现，加入到IOC容器中 -->
		<property name="basePackage" value="com/teaShop/dao"></property>
	</bean>
	
	<!-- 配置一个可以执行批量导入的sqlSession -->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean> -->
	
	<!-- 事务控制的配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
	    <property name="messageConverters">
	        <list>
	            <!--json转换器-->
	            <ref bean="mappingJacksonHttpMessageConverter" />
	        </list>
	    </property>
	</bean>
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">  
	    <property name="messageConverters">  
	        <list>  
	               <ref bean="mappingJacksonHttpMessageConverter" />  
	        </list>  
	    </property>  
	</bean>  

	<bean id="mappingJacksonHttpMessageConverter"  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
	     <property name = "supportedMediaTypes">  
	          <list>  
	            <bean class="org.springframework.http.MediaType">  
		             <constructor-arg index="0" value="text"/>  
		             <constructor-arg index="1" value="plain"/>  
		             <constructor-arg index="2" value="UTF-8"/>  
	            </bean>  
	            <bean class="org.springframework.http.MediaType">  
		             <constructor-arg index="0" value="*"/>  
		             <constructor-arg index="1" value="*"/>  
		             <constructor-arg index="2" value="UTF-8"/>  
	            </bean>  
	            <bean class="org.springframework.http.MediaType">  
		             <constructor-arg index="0" value="text"/>  
		             <constructor-arg index="1" value="*"/>  
		             <constructor-arg index="2" value="UTF-8"/>  
	            </bean>  
	             <bean class="org.springframework.http.MediaType">  
		             <constructor-arg index="0" value="application"/>  
		             <constructor-arg index="1" value="json"/>  
		             <constructor-arg index="2" value="UTF-8"/>  
	            </bean>  
	          </list>  
	    </property>  
	</bean>   
	<!-- 开启基于注解的事物，使用xml配置的事物（必要主要的都是使用配置式） -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* com.teaShop.*.*.*(..))" id="txPoint"/>
		<!-- 配置事物增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	<!-- 开启aop，对类代理 -->
    <aop:config proxy-target-class="true"></aop:config>
	<!-- 配置事物增强，事物如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事物方法 -->
			<tx:method name="*"/>
			<!-- 以get开始的所有方法 -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
</beans>